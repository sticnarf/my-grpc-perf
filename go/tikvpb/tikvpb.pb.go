// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: tikvpb.proto

package tikvpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandPri int32

const (
	CommandPri_Normal CommandPri = 0 // Normal is the default value.
	CommandPri_Low    CommandPri = 1
	CommandPri_High   CommandPri = 2
)

// Enum value maps for CommandPri.
var (
	CommandPri_name = map[int32]string{
		0: "Normal",
		1: "Low",
		2: "High",
	}
	CommandPri_value = map[string]int32{
		"Normal": 0,
		"Low":    1,
		"High":   2,
	}
)

func (x CommandPri) Enum() *CommandPri {
	p := new(CommandPri)
	*p = x
	return p
}

func (x CommandPri) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandPri) Descriptor() protoreflect.EnumDescriptor {
	return file_tikvpb_proto_enumTypes[0].Descriptor()
}

func (CommandPri) Type() protoreflect.EnumType {
	return &file_tikvpb_proto_enumTypes[0]
}

func (x CommandPri) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandPri.Descriptor instead.
func (CommandPri) EnumDescriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{0}
}

type IsolationLevel int32

const (
	IsolationLevel_SI IsolationLevel = 0 // SI = snapshot isolation
	IsolationLevel_RC IsolationLevel = 1 // RC = read committed
)

// Enum value maps for IsolationLevel.
var (
	IsolationLevel_name = map[int32]string{
		0: "SI",
		1: "RC",
	}
	IsolationLevel_value = map[string]int32{
		"SI": 0,
		"RC": 1,
	}
)

func (x IsolationLevel) Enum() *IsolationLevel {
	p := new(IsolationLevel)
	*p = x
	return p
}

func (x IsolationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsolationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_tikvpb_proto_enumTypes[1].Descriptor()
}

func (IsolationLevel) Type() protoreflect.EnumType {
	return &file_tikvpb_proto_enumTypes[1]
}

func (x IsolationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsolationLevel.Descriptor instead.
func (IsolationLevel) EnumDescriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{1}
}

type Op int32

const (
	Op_Put      Op = 0
	Op_Del      Op = 1
	Op_Lock     Op = 2
	Op_Rollback Op = 3
	// insert operation has a constraint that key should not exist before.
	Op_Insert          Op = 4
	Op_PessimisticLock Op = 5
	Op_CheckNotExists  Op = 6
)

// Enum value maps for Op.
var (
	Op_name = map[int32]string{
		0: "Put",
		1: "Del",
		2: "Lock",
		3: "Rollback",
		4: "Insert",
		5: "PessimisticLock",
		6: "CheckNotExists",
	}
	Op_value = map[string]int32{
		"Put":             0,
		"Del":             1,
		"Lock":            2,
		"Rollback":        3,
		"Insert":          4,
		"PessimisticLock": 5,
		"CheckNotExists":  6,
	}
)

func (x Op) Enum() *Op {
	p := new(Op)
	*p = x
	return p
}

func (x Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op) Descriptor() protoreflect.EnumDescriptor {
	return file_tikvpb_proto_enumTypes[2].Descriptor()
}

func (Op) Type() protoreflect.EnumType {
	return &file_tikvpb_proto_enumTypes[2]
}

func (x Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op.Descriptor instead.
func (Op) EnumDescriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{2}
}

type PeerRole int32

const (
	// Voter -> Voter
	PeerRole_Voter PeerRole = 0
	// Learner/None -> Learner
	PeerRole_Learner PeerRole = 1
	// Learner/None -> Voter
	PeerRole_IncomingVoter PeerRole = 2
	// Voter -> Learner
	PeerRole_DemotingVoter PeerRole = 3
)

// Enum value maps for PeerRole.
var (
	PeerRole_name = map[int32]string{
		0: "Voter",
		1: "Learner",
		2: "IncomingVoter",
		3: "DemotingVoter",
	}
	PeerRole_value = map[string]int32{
		"Voter":         0,
		"Learner":       1,
		"IncomingVoter": 2,
		"DemotingVoter": 3,
	}
)

func (x PeerRole) Enum() *PeerRole {
	p := new(PeerRole)
	*p = x
	return p
}

func (x PeerRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerRole) Descriptor() protoreflect.EnumDescriptor {
	return file_tikvpb_proto_enumTypes[3].Descriptor()
}

func (PeerRole) Type() protoreflect.EnumType {
	return &file_tikvpb_proto_enumTypes[3]
}

func (x PeerRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerRole.Descriptor instead.
func (PeerRole) EnumDescriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{3}
}

// A transactional get command. Lookup a value for `key` in the transaction with
// starting timestamp = `version`.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key     []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Version uint64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A region error indicates that the request was sent to the wrong TiKV node
	// (or other, similar errors).
	RegionError *Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	// A value could not be retrieved due to the state of the database for the requested key.
	Error *KeyError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// A successful result.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// True if the key does not exist in the database.
	NotFound bool `protobuf:"varint,4,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
	// Time and scan details when processing the request.
	ExecDetailsV2 *ExecDetailsV2 `protobuf:"bytes,6,opt,name=exec_details_v2,json=execDetailsV2,proto3" json:"exec_details_v2,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{1}
}

func (x *GetResponse) GetRegionError() *Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *GetResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetResponse) GetNotFound() bool {
	if x != nil {
		return x.NotFound
	}
	return false
}

func (x *GetResponse) GetExecDetailsV2() *ExecDetailsV2 {
	if x != nil {
		return x.ExecDetailsV2
	}
	return nil
}

// Miscellaneous metadata attached to most requests.
type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId       uint64         `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	RegionEpoch    *RegionEpoch   `protobuf:"bytes,2,opt,name=region_epoch,json=regionEpoch,proto3" json:"region_epoch,omitempty"`
	Peer           *Peer          `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Term           uint64         `protobuf:"varint,5,opt,name=term,proto3" json:"term,omitempty"`
	Priority       CommandPri     `protobuf:"varint,6,opt,name=priority,proto3,enum=tikvpb.CommandPri" json:"priority,omitempty"`
	IsolationLevel IsolationLevel `protobuf:"varint,7,opt,name=isolation_level,json=isolationLevel,proto3,enum=tikvpb.IsolationLevel" json:"isolation_level,omitempty"`
	NotFillCache   bool           `protobuf:"varint,8,opt,name=not_fill_cache,json=notFillCache,proto3" json:"not_fill_cache,omitempty"`
	SyncLog        bool           `protobuf:"varint,9,opt,name=sync_log,json=syncLog,proto3" json:"sync_log,omitempty"`
	// True means execution time statistics should be recorded and returned.
	RecordTimeStat bool `protobuf:"varint,10,opt,name=record_time_stat,json=recordTimeStat,proto3" json:"record_time_stat,omitempty"`
	// True means RocksDB scan statistics should be recorded and returned.
	RecordScanStat         bool     `protobuf:"varint,11,opt,name=record_scan_stat,json=recordScanStat,proto3" json:"record_scan_stat,omitempty"`
	ReplicaRead            bool     `protobuf:"varint,12,opt,name=replica_read,json=replicaRead,proto3" json:"replica_read,omitempty"`
	ResolvedLocks          []uint64 `protobuf:"varint,13,rep,packed,name=resolved_locks,json=resolvedLocks,proto3" json:"resolved_locks,omitempty"`
	MaxExecutionDurationMs uint64   `protobuf:"varint,14,opt,name=max_execution_duration_ms,json=maxExecutionDurationMs,proto3" json:"max_execution_duration_ms,omitempty"`
	// After a region applies to `applied_index`, we can get a
	// snapshot for the region even if the peer is a follower.
	AppliedIndex uint64 `protobuf:"varint,15,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	// A hint for TiKV to schedule tasks more fairly. Query with same task ID
	// may share same priority and resource quota.
	TaskId uint64 `protobuf:"varint,16,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Not required to read the most up-to-date data, replicas with `safe_ts` >= `start_ts`
	// can handle read request directly
	StaleRead bool `protobuf:"varint,17,opt,name=stale_read,json=staleRead,proto3" json:"stale_read,omitempty"`
	// Any additional serialized information about the request.
	ResourceGroupTag []byte `protobuf:"bytes,18,opt,name=resource_group_tag,json=resourceGroupTag,proto3" json:"resource_group_tag,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{2}
}

func (x *Context) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Context) GetRegionEpoch() *RegionEpoch {
	if x != nil {
		return x.RegionEpoch
	}
	return nil
}

func (x *Context) GetPeer() *Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *Context) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Context) GetPriority() CommandPri {
	if x != nil {
		return x.Priority
	}
	return CommandPri_Normal
}

func (x *Context) GetIsolationLevel() IsolationLevel {
	if x != nil {
		return x.IsolationLevel
	}
	return IsolationLevel_SI
}

func (x *Context) GetNotFillCache() bool {
	if x != nil {
		return x.NotFillCache
	}
	return false
}

func (x *Context) GetSyncLog() bool {
	if x != nil {
		return x.SyncLog
	}
	return false
}

func (x *Context) GetRecordTimeStat() bool {
	if x != nil {
		return x.RecordTimeStat
	}
	return false
}

func (x *Context) GetRecordScanStat() bool {
	if x != nil {
		return x.RecordScanStat
	}
	return false
}

func (x *Context) GetReplicaRead() bool {
	if x != nil {
		return x.ReplicaRead
	}
	return false
}

func (x *Context) GetResolvedLocks() []uint64 {
	if x != nil {
		return x.ResolvedLocks
	}
	return nil
}

func (x *Context) GetMaxExecutionDurationMs() uint64 {
	if x != nil {
		return x.MaxExecutionDurationMs
	}
	return 0
}

func (x *Context) GetAppliedIndex() uint64 {
	if x != nil {
		return x.AppliedIndex
	}
	return 0
}

func (x *Context) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Context) GetStaleRead() bool {
	if x != nil {
		return x.StaleRead
	}
	return false
}

func (x *Context) GetResourceGroupTag() []byte {
	if x != nil {
		return x.ResourceGroupTag
	}
	return nil
}

type LockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryLock []byte `protobuf:"bytes,1,opt,name=primary_lock,json=primaryLock,proto3" json:"primary_lock,omitempty"`
	LockVersion uint64 `protobuf:"varint,2,opt,name=lock_version,json=lockVersion,proto3" json:"lock_version,omitempty"`
	Key         []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	LockTtl     uint64 `protobuf:"varint,4,opt,name=lock_ttl,json=lockTtl,proto3" json:"lock_ttl,omitempty"`
	// How many keys this transaction involves in this region.
	TxnSize         uint64 `protobuf:"varint,5,opt,name=txn_size,json=txnSize,proto3" json:"txn_size,omitempty"`
	LockType        Op     `protobuf:"varint,6,opt,name=lock_type,json=lockType,proto3,enum=tikvpb.Op" json:"lock_type,omitempty"`
	LockForUpdateTs uint64 `protobuf:"varint,7,opt,name=lock_for_update_ts,json=lockForUpdateTs,proto3" json:"lock_for_update_ts,omitempty"`
	// Fields for transactions that are using Async Commit.
	UseAsyncCommit bool     `protobuf:"varint,8,opt,name=use_async_commit,json=useAsyncCommit,proto3" json:"use_async_commit,omitempty"`
	MinCommitTs    uint64   `protobuf:"varint,9,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
	Secondaries    [][]byte `protobuf:"bytes,10,rep,name=secondaries,proto3" json:"secondaries,omitempty"`
}

func (x *LockInfo) Reset() {
	*x = LockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockInfo) ProtoMessage() {}

func (x *LockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockInfo.ProtoReflect.Descriptor instead.
func (*LockInfo) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{3}
}

func (x *LockInfo) GetPrimaryLock() []byte {
	if x != nil {
		return x.PrimaryLock
	}
	return nil
}

func (x *LockInfo) GetLockVersion() uint64 {
	if x != nil {
		return x.LockVersion
	}
	return 0
}

func (x *LockInfo) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *LockInfo) GetLockTtl() uint64 {
	if x != nil {
		return x.LockTtl
	}
	return 0
}

func (x *LockInfo) GetTxnSize() uint64 {
	if x != nil {
		return x.TxnSize
	}
	return 0
}

func (x *LockInfo) GetLockType() Op {
	if x != nil {
		return x.LockType
	}
	return Op_Put
}

func (x *LockInfo) GetLockForUpdateTs() uint64 {
	if x != nil {
		return x.LockForUpdateTs
	}
	return 0
}

func (x *LockInfo) GetUseAsyncCommit() bool {
	if x != nil {
		return x.UseAsyncCommit
	}
	return false
}

func (x *LockInfo) GetMinCommitTs() uint64 {
	if x != nil {
		return x.MinCommitTs
	}
	return 0
}

func (x *LockInfo) GetSecondaries() [][]byte {
	if x != nil {
		return x.Secondaries
	}
	return nil
}

type KeyError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locked           *LockInfo         `protobuf:"bytes,1,opt,name=locked,proto3" json:"locked,omitempty"`                                                 // Client should backoff or cleanup the lock then retry.
	Retryable        string            `protobuf:"bytes,2,opt,name=retryable,proto3" json:"retryable,omitempty"`                                           // Client may restart the txn. e.g write conflict.
	Abort            string            `protobuf:"bytes,3,opt,name=abort,proto3" json:"abort,omitempty"`                                                   // Client should abort the txn.
	Conflict         *WriteConflict    `protobuf:"bytes,4,opt,name=conflict,proto3" json:"conflict,omitempty"`                                             // Write conflict is moved from retryable to here.
	AlreadyExist     *AlreadyExist     `protobuf:"bytes,5,opt,name=already_exist,json=alreadyExist,proto3" json:"already_exist,omitempty"`                 // Key already exists
	Deadlock         *Deadlock         `protobuf:"bytes,6,opt,name=deadlock,proto3" json:"deadlock,omitempty"`                                             // Deadlock is used in pessimistic transaction for single statement rollback.
	CommitTsExpired  *CommitTsExpired  `protobuf:"bytes,7,opt,name=commit_ts_expired,json=commitTsExpired,proto3" json:"commit_ts_expired,omitempty"`      // Commit ts is earlier than min commit ts of a transaction.
	TxnNotFound      *TxnNotFound      `protobuf:"bytes,8,opt,name=txn_not_found,json=txnNotFound,proto3" json:"txn_not_found,omitempty"`                  // Txn not found when checking txn status.
	CommitTsTooLarge *CommitTsTooLarge `protobuf:"bytes,9,opt,name=commit_ts_too_large,json=commitTsTooLarge,proto3" json:"commit_ts_too_large,omitempty"` // Calculated commit TS exceeds the limit given by the user.
}

func (x *KeyError) Reset() {
	*x = KeyError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyError) ProtoMessage() {}

func (x *KeyError) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyError.ProtoReflect.Descriptor instead.
func (*KeyError) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{4}
}

func (x *KeyError) GetLocked() *LockInfo {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *KeyError) GetRetryable() string {
	if x != nil {
		return x.Retryable
	}
	return ""
}

func (x *KeyError) GetAbort() string {
	if x != nil {
		return x.Abort
	}
	return ""
}

func (x *KeyError) GetConflict() *WriteConflict {
	if x != nil {
		return x.Conflict
	}
	return nil
}

func (x *KeyError) GetAlreadyExist() *AlreadyExist {
	if x != nil {
		return x.AlreadyExist
	}
	return nil
}

func (x *KeyError) GetDeadlock() *Deadlock {
	if x != nil {
		return x.Deadlock
	}
	return nil
}

func (x *KeyError) GetCommitTsExpired() *CommitTsExpired {
	if x != nil {
		return x.CommitTsExpired
	}
	return nil
}

func (x *KeyError) GetTxnNotFound() *TxnNotFound {
	if x != nil {
		return x.TxnNotFound
	}
	return nil
}

func (x *KeyError) GetCommitTsTooLarge() *CommitTsTooLarge {
	if x != nil {
		return x.CommitTsTooLarge
	}
	return nil
}

type WriteConflict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs          uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	ConflictTs       uint64 `protobuf:"varint,2,opt,name=conflict_ts,json=conflictTs,proto3" json:"conflict_ts,omitempty"`
	Key              []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Primary          []byte `protobuf:"bytes,4,opt,name=primary,proto3" json:"primary,omitempty"`
	ConflictCommitTs uint64 `protobuf:"varint,5,opt,name=conflict_commit_ts,json=conflictCommitTs,proto3" json:"conflict_commit_ts,omitempty"`
}

func (x *WriteConflict) Reset() {
	*x = WriteConflict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteConflict) ProtoMessage() {}

func (x *WriteConflict) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteConflict.ProtoReflect.Descriptor instead.
func (*WriteConflict) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{5}
}

func (x *WriteConflict) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *WriteConflict) GetConflictTs() uint64 {
	if x != nil {
		return x.ConflictTs
	}
	return 0
}

func (x *WriteConflict) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WriteConflict) GetPrimary() []byte {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *WriteConflict) GetConflictCommitTs() uint64 {
	if x != nil {
		return x.ConflictCommitTs
	}
	return 0
}

type AlreadyExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AlreadyExist) Reset() {
	*x = AlreadyExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlreadyExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlreadyExist) ProtoMessage() {}

func (x *AlreadyExist) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlreadyExist.ProtoReflect.Descriptor instead.
func (*AlreadyExist) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{6}
}

func (x *AlreadyExist) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Deadlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockTs          uint64          `protobuf:"varint,1,opt,name=lock_ts,json=lockTs,proto3" json:"lock_ts,omitempty"`
	LockKey         []byte          `protobuf:"bytes,2,opt,name=lock_key,json=lockKey,proto3" json:"lock_key,omitempty"`
	DeadlockKeyHash uint64          `protobuf:"varint,3,opt,name=deadlock_key_hash,json=deadlockKeyHash,proto3" json:"deadlock_key_hash,omitempty"`
	WaitChain       []*WaitForEntry `protobuf:"bytes,4,rep,name=wait_chain,json=waitChain,proto3" json:"wait_chain,omitempty"`
}

func (x *Deadlock) Reset() {
	*x = Deadlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deadlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deadlock) ProtoMessage() {}

func (x *Deadlock) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deadlock.ProtoReflect.Descriptor instead.
func (*Deadlock) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{7}
}

func (x *Deadlock) GetLockTs() uint64 {
	if x != nil {
		return x.LockTs
	}
	return 0
}

func (x *Deadlock) GetLockKey() []byte {
	if x != nil {
		return x.LockKey
	}
	return nil
}

func (x *Deadlock) GetDeadlockKeyHash() uint64 {
	if x != nil {
		return x.DeadlockKeyHash
	}
	return 0
}

func (x *Deadlock) GetWaitChain() []*WaitForEntry {
	if x != nil {
		return x.WaitChain
	}
	return nil
}

type WaitForEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction id that is waiting.
	Txn uint64 `protobuf:"varint,1,opt,name=txn,proto3" json:"txn,omitempty"`
	// The transaction id that is being waited for.
	WaitForTxn uint64 `protobuf:"varint,2,opt,name=wait_for_txn,json=waitForTxn,proto3" json:"wait_for_txn,omitempty"`
	// The hash value of the key is being waited for.
	KeyHash uint64 `protobuf:"varint,3,opt,name=key_hash,json=keyHash,proto3" json:"key_hash,omitempty"`
	// The key the current txn is trying to lock.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The tag came from the lock request's context.
	ResourceGroupTag []byte `protobuf:"bytes,5,opt,name=resource_group_tag,json=resourceGroupTag,proto3" json:"resource_group_tag,omitempty"`
	// Milliseconds it has been waits.
	WaitTime uint64 `protobuf:"varint,6,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
}

func (x *WaitForEntry) Reset() {
	*x = WaitForEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForEntry) ProtoMessage() {}

func (x *WaitForEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForEntry.ProtoReflect.Descriptor instead.
func (*WaitForEntry) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{8}
}

func (x *WaitForEntry) GetTxn() uint64 {
	if x != nil {
		return x.Txn
	}
	return 0
}

func (x *WaitForEntry) GetWaitForTxn() uint64 {
	if x != nil {
		return x.WaitForTxn
	}
	return 0
}

func (x *WaitForEntry) GetKeyHash() uint64 {
	if x != nil {
		return x.KeyHash
	}
	return 0
}

func (x *WaitForEntry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WaitForEntry) GetResourceGroupTag() []byte {
	if x != nil {
		return x.ResourceGroupTag
	}
	return nil
}

func (x *WaitForEntry) GetWaitTime() uint64 {
	if x != nil {
		return x.WaitTime
	}
	return 0
}

type CommitTsExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs           uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	AttemptedCommitTs uint64 `protobuf:"varint,2,opt,name=attempted_commit_ts,json=attemptedCommitTs,proto3" json:"attempted_commit_ts,omitempty"`
	Key               []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	MinCommitTs       uint64 `protobuf:"varint,4,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
}

func (x *CommitTsExpired) Reset() {
	*x = CommitTsExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTsExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTsExpired) ProtoMessage() {}

func (x *CommitTsExpired) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTsExpired.ProtoReflect.Descriptor instead.
func (*CommitTsExpired) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{9}
}

func (x *CommitTsExpired) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *CommitTsExpired) GetAttemptedCommitTs() uint64 {
	if x != nil {
		return x.AttemptedCommitTs
	}
	return 0
}

func (x *CommitTsExpired) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CommitTsExpired) GetMinCommitTs() uint64 {
	if x != nil {
		return x.MinCommitTs
	}
	return 0
}

type TxnNotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs    uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	PrimaryKey []byte `protobuf:"bytes,2,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
}

func (x *TxnNotFound) Reset() {
	*x = TxnNotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnNotFound) ProtoMessage() {}

func (x *TxnNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnNotFound.ProtoReflect.Descriptor instead.
func (*TxnNotFound) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{10}
}

func (x *TxnNotFound) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *TxnNotFound) GetPrimaryKey() []byte {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

type CommitTsTooLarge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitTs uint64 `protobuf:"varint,1,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"` // The calculated commit TS.
}

func (x *CommitTsTooLarge) Reset() {
	*x = CommitTsTooLarge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTsTooLarge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTsTooLarge) ProtoMessage() {}

func (x *CommitTsTooLarge) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTsTooLarge.ProtoReflect.Descriptor instead.
func (*CommitTsTooLarge) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{11}
}

func (x *CommitTsTooLarge) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

type TimeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Off-cpu wall time elapsed in TiKV side. Usually this includes queue waiting time and
	// other kind of waitings in series.
	WaitWallTimeMs int64 `protobuf:"varint,1,opt,name=wait_wall_time_ms,json=waitWallTimeMs,proto3" json:"wait_wall_time_ms,omitempty"`
	// Off-cpu and on-cpu wall time elapsed to actually process the request payload. It does not
	// include `wait_wall_time`.
	// This field is very close to the CPU time in most cases. Some wait time spend in RocksDB
	// cannot be excluded for now, like Mutex wait time, which is included in this field, so that
	// this field is called wall time instead of CPU time.
	ProcessWallTimeMs int64 `protobuf:"varint,2,opt,name=process_wall_time_ms,json=processWallTimeMs,proto3" json:"process_wall_time_ms,omitempty"`
	// KV read wall Time means the time used in key/value scan and get.
	KvReadWallTimeMs int64 `protobuf:"varint,3,opt,name=kv_read_wall_time_ms,json=kvReadWallTimeMs,proto3" json:"kv_read_wall_time_ms,omitempty"`
}

func (x *TimeDetail) Reset() {
	*x = TimeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeDetail) ProtoMessage() {}

func (x *TimeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeDetail.ProtoReflect.Descriptor instead.
func (*TimeDetail) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{12}
}

func (x *TimeDetail) GetWaitWallTimeMs() int64 {
	if x != nil {
		return x.WaitWallTimeMs
	}
	return 0
}

func (x *TimeDetail) GetProcessWallTimeMs() int64 {
	if x != nil {
		return x.ProcessWallTimeMs
	}
	return 0
}

func (x *TimeDetail) GetKvReadWallTimeMs() int64 {
	if x != nil {
		return x.KvReadWallTimeMs
	}
	return 0
}

type ScanDetailV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of user keys scanned from the storage.
	// It does not include deleted version or RocksDB tombstone keys.
	// For Coprocessor requests, it includes keys that has been filtered out by
	// Selection.
	ProcessedVersions uint64 `protobuf:"varint,1,opt,name=processed_versions,json=processedVersions,proto3" json:"processed_versions,omitempty"`
	// Number of bytes of user key-value pairs scanned from the storage, i.e.
	// total size of data returned from MVCC layer.
	ProcessedVersionsSize uint64 `protobuf:"varint,8,opt,name=processed_versions_size,json=processedVersionsSize,proto3" json:"processed_versions_size,omitempty"`
	// Approximate number of MVCC keys meet during scanning. It includes
	// deleted versions, but does not include RocksDB tombstone keys.
	//
	// When this field is notably larger than `processed_versions`, it means
	// there are a lot of deleted MVCC keys.
	TotalVersions uint64 `protobuf:"varint,2,opt,name=total_versions,json=totalVersions,proto3" json:"total_versions,omitempty"`
	// Total number of deletes and single deletes skipped over during
	// iteration, i.e. how many RocksDB tombstones are skipped.
	RocksdbDeleteSkippedCount uint64 `protobuf:"varint,3,opt,name=rocksdb_delete_skipped_count,json=rocksdbDeleteSkippedCount,proto3" json:"rocksdb_delete_skipped_count,omitempty"`
	// Total number of internal keys skipped over during iteration.
	// See https://github.com/facebook/rocksdb/blob/9f1c84ca471d8b1ad7be9f3eebfc2c7e07dfd7a7/include/rocksdb/perf_context.h#L84 for details.
	RocksdbKeySkippedCount uint64 `protobuf:"varint,4,opt,name=rocksdb_key_skipped_count,json=rocksdbKeySkippedCount,proto3" json:"rocksdb_key_skipped_count,omitempty"`
	// Total number of RocksDB block cache hits.
	RocksdbBlockCacheHitCount uint64 `protobuf:"varint,5,opt,name=rocksdb_block_cache_hit_count,json=rocksdbBlockCacheHitCount,proto3" json:"rocksdb_block_cache_hit_count,omitempty"`
	// Total number of block reads (with IO).
	RocksdbBlockReadCount uint64 `protobuf:"varint,6,opt,name=rocksdb_block_read_count,json=rocksdbBlockReadCount,proto3" json:"rocksdb_block_read_count,omitempty"`
	// Total number of bytes from block reads.
	RocksdbBlockReadByte uint64 `protobuf:"varint,7,opt,name=rocksdb_block_read_byte,json=rocksdbBlockReadByte,proto3" json:"rocksdb_block_read_byte,omitempty"`
}

func (x *ScanDetailV2) Reset() {
	*x = ScanDetailV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanDetailV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanDetailV2) ProtoMessage() {}

func (x *ScanDetailV2) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanDetailV2.ProtoReflect.Descriptor instead.
func (*ScanDetailV2) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{13}
}

func (x *ScanDetailV2) GetProcessedVersions() uint64 {
	if x != nil {
		return x.ProcessedVersions
	}
	return 0
}

func (x *ScanDetailV2) GetProcessedVersionsSize() uint64 {
	if x != nil {
		return x.ProcessedVersionsSize
	}
	return 0
}

func (x *ScanDetailV2) GetTotalVersions() uint64 {
	if x != nil {
		return x.TotalVersions
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbDeleteSkippedCount() uint64 {
	if x != nil {
		return x.RocksdbDeleteSkippedCount
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbKeySkippedCount() uint64 {
	if x != nil {
		return x.RocksdbKeySkippedCount
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbBlockCacheHitCount() uint64 {
	if x != nil {
		return x.RocksdbBlockCacheHitCount
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbBlockReadCount() uint64 {
	if x != nil {
		return x.RocksdbBlockReadCount
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbBlockReadByte() uint64 {
	if x != nil {
		return x.RocksdbBlockReadByte
	}
	return 0
}

type ExecDetailsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available when ctx.record_time_stat = true or meet slow query.
	TimeDetail *TimeDetail `protobuf:"bytes,1,opt,name=time_detail,json=timeDetail,proto3" json:"time_detail,omitempty"`
	// Available when ctx.record_scan_stat = true or meet slow query.
	ScanDetailV2 *ScanDetailV2 `protobuf:"bytes,2,opt,name=scan_detail_v2,json=scanDetailV2,proto3" json:"scan_detail_v2,omitempty"`
}

func (x *ExecDetailsV2) Reset() {
	*x = ExecDetailsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecDetailsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecDetailsV2) ProtoMessage() {}

func (x *ExecDetailsV2) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecDetailsV2.ProtoReflect.Descriptor instead.
func (*ExecDetailsV2) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{14}
}

func (x *ExecDetailsV2) GetTimeDetail() *TimeDetail {
	if x != nil {
		return x.TimeDetail
	}
	return nil
}

func (x *ExecDetailsV2) GetScanDetailV2() *ScanDetailV2 {
	if x != nil {
		return x.ScanDetailV2
	}
	return nil
}

// Error wraps all region errors, indicates an error encountered by a request.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error message
	Message               string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	NotLeader             *NotLeader             `protobuf:"bytes,2,opt,name=not_leader,json=notLeader,proto3" json:"not_leader,omitempty"`
	RegionNotFound        *RegionNotFound        `protobuf:"bytes,3,opt,name=region_not_found,json=regionNotFound,proto3" json:"region_not_found,omitempty"`
	KeyNotInRegion        *KeyNotInRegion        `protobuf:"bytes,4,opt,name=key_not_in_region,json=keyNotInRegion,proto3" json:"key_not_in_region,omitempty"`
	EpochNotMatch         *EpochNotMatch         `protobuf:"bytes,5,opt,name=epoch_not_match,json=epochNotMatch,proto3" json:"epoch_not_match,omitempty"`
	ServerIsBusy          *ServerIsBusy          `protobuf:"bytes,6,opt,name=server_is_busy,json=serverIsBusy,proto3" json:"server_is_busy,omitempty"`
	StaleCommand          *StaleCommand          `protobuf:"bytes,7,opt,name=stale_command,json=staleCommand,proto3" json:"stale_command,omitempty"`
	StoreNotMatch         *StoreNotMatch         `protobuf:"bytes,8,opt,name=store_not_match,json=storeNotMatch,proto3" json:"store_not_match,omitempty"`
	RaftEntryTooLarge     *RaftEntryTooLarge     `protobuf:"bytes,9,opt,name=raft_entry_too_large,json=raftEntryTooLarge,proto3" json:"raft_entry_too_large,omitempty"`
	MaxTimestampNotSynced *MaxTimestampNotSynced `protobuf:"bytes,10,opt,name=max_timestamp_not_synced,json=maxTimestampNotSynced,proto3" json:"max_timestamp_not_synced,omitempty"`
	ReadIndexNotReady     *ReadIndexNotReady     `protobuf:"bytes,11,opt,name=read_index_not_ready,json=readIndexNotReady,proto3" json:"read_index_not_ready,omitempty"`
	ProposalInMergingMode *ProposalInMergingMode `protobuf:"bytes,12,opt,name=proposal_in_merging_mode,json=proposalInMergingMode,proto3" json:"proposal_in_merging_mode,omitempty"`
	DataIsNotReady        *DataIsNotReady        `protobuf:"bytes,13,opt,name=data_is_not_ready,json=dataIsNotReady,proto3" json:"data_is_not_ready,omitempty"`
	RegionNotInitialized  *RegionNotInitialized  `protobuf:"bytes,14,opt,name=region_not_initialized,json=regionNotInitialized,proto3" json:"region_not_initialized,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{15}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetNotLeader() *NotLeader {
	if x != nil {
		return x.NotLeader
	}
	return nil
}

func (x *Error) GetRegionNotFound() *RegionNotFound {
	if x != nil {
		return x.RegionNotFound
	}
	return nil
}

func (x *Error) GetKeyNotInRegion() *KeyNotInRegion {
	if x != nil {
		return x.KeyNotInRegion
	}
	return nil
}

func (x *Error) GetEpochNotMatch() *EpochNotMatch {
	if x != nil {
		return x.EpochNotMatch
	}
	return nil
}

func (x *Error) GetServerIsBusy() *ServerIsBusy {
	if x != nil {
		return x.ServerIsBusy
	}
	return nil
}

func (x *Error) GetStaleCommand() *StaleCommand {
	if x != nil {
		return x.StaleCommand
	}
	return nil
}

func (x *Error) GetStoreNotMatch() *StoreNotMatch {
	if x != nil {
		return x.StoreNotMatch
	}
	return nil
}

func (x *Error) GetRaftEntryTooLarge() *RaftEntryTooLarge {
	if x != nil {
		return x.RaftEntryTooLarge
	}
	return nil
}

func (x *Error) GetMaxTimestampNotSynced() *MaxTimestampNotSynced {
	if x != nil {
		return x.MaxTimestampNotSynced
	}
	return nil
}

func (x *Error) GetReadIndexNotReady() *ReadIndexNotReady {
	if x != nil {
		return x.ReadIndexNotReady
	}
	return nil
}

func (x *Error) GetProposalInMergingMode() *ProposalInMergingMode {
	if x != nil {
		return x.ProposalInMergingMode
	}
	return nil
}

func (x *Error) GetDataIsNotReady() *DataIsNotReady {
	if x != nil {
		return x.DataIsNotReady
	}
	return nil
}

func (x *Error) GetRegionNotInitialized() *RegionNotInitialized {
	if x != nil {
		return x.RegionNotInitialized
	}
	return nil
}

// NotLeader is the error variant that tells a request be handle by raft leader
// is sent to raft follower or learner.
type NotLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested region ID
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Region leader of the requested region
	Leader *Peer `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (x *NotLeader) Reset() {
	*x = NotLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLeader) ProtoMessage() {}

func (x *NotLeader) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLeader.ProtoReflect.Descriptor instead.
func (*NotLeader) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{16}
}

func (x *NotLeader) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *NotLeader) GetLeader() *Peer {
	if x != nil {
		return x.Leader
	}
	return nil
}

// StoreNotMatch is the error variant that tells the request is sent to wrong store.
// (i.e. inconsistency of the store ID that request shows and the real store ID of this server.)
type StoreNotMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Store id in request
	RequestStoreId uint64 `protobuf:"varint,1,opt,name=request_store_id,json=requestStoreId,proto3" json:"request_store_id,omitempty"`
	// Actual store id
	ActualStoreId uint64 `protobuf:"varint,2,opt,name=actual_store_id,json=actualStoreId,proto3" json:"actual_store_id,omitempty"`
}

func (x *StoreNotMatch) Reset() {
	*x = StoreNotMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreNotMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreNotMatch) ProtoMessage() {}

func (x *StoreNotMatch) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreNotMatch.ProtoReflect.Descriptor instead.
func (*StoreNotMatch) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{17}
}

func (x *StoreNotMatch) GetRequestStoreId() uint64 {
	if x != nil {
		return x.RequestStoreId
	}
	return 0
}

func (x *StoreNotMatch) GetActualStoreId() uint64 {
	if x != nil {
		return x.ActualStoreId
	}
	return 0
}

// RegionNotFound is the error variant that tells there isn't any region in this TiKV
// matches the requested region ID.
type RegionNotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested region ID
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *RegionNotFound) Reset() {
	*x = RegionNotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionNotFound) ProtoMessage() {}

func (x *RegionNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionNotFound.ProtoReflect.Descriptor instead.
func (*RegionNotFound) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{18}
}

func (x *RegionNotFound) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

// RegionNotInitialized is the error variant that tells there isn't any initialized peer
// matchesthe request region ID.
type RegionNotInitialized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request region ID
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *RegionNotInitialized) Reset() {
	*x = RegionNotInitialized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionNotInitialized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionNotInitialized) ProtoMessage() {}

func (x *RegionNotInitialized) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionNotInitialized.ProtoReflect.Descriptor instead.
func (*RegionNotInitialized) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{19}
}

func (x *RegionNotInitialized) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

// KeyNotInRegion is the error variant that tells the key the request requires isn't present in
// this region.
type KeyNotInRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested key
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The requested region ID
	RegionId uint64 `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Start key of the requested region
	StartKey []byte `protobuf:"bytes,3,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	// Snd key of the requested region
	EndKey []byte `protobuf:"bytes,4,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *KeyNotInRegion) Reset() {
	*x = KeyNotInRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyNotInRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyNotInRegion) ProtoMessage() {}

func (x *KeyNotInRegion) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyNotInRegion.ProtoReflect.Descriptor instead.
func (*KeyNotInRegion) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{20}
}

func (x *KeyNotInRegion) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyNotInRegion) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *KeyNotInRegion) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *KeyNotInRegion) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

// EpochNotMatch is the error variant that tells a region has been updated.
// (e.g. by splitting / merging, or raft Confchange.)
// Hence, a command is based on a stale version of a region.
type EpochNotMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available regions that may be siblings of the requested one.
	CurrentRegions []*Region `protobuf:"bytes,1,rep,name=current_regions,json=currentRegions,proto3" json:"current_regions,omitempty"`
}

func (x *EpochNotMatch) Reset() {
	*x = EpochNotMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochNotMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochNotMatch) ProtoMessage() {}

func (x *EpochNotMatch) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochNotMatch.ProtoReflect.Descriptor instead.
func (*EpochNotMatch) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{21}
}

func (x *EpochNotMatch) GetCurrentRegions() []*Region {
	if x != nil {
		return x.CurrentRegions
	}
	return nil
}

// ServerIsBusy is the error variant that tells the server is too busy to response.
type ServerIsBusy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// The suggested backoff time
	BackoffMs uint64 `protobuf:"varint,2,opt,name=backoff_ms,json=backoffMs,proto3" json:"backoff_ms,omitempty"`
}

func (x *ServerIsBusy) Reset() {
	*x = ServerIsBusy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerIsBusy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerIsBusy) ProtoMessage() {}

func (x *ServerIsBusy) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerIsBusy.ProtoReflect.Descriptor instead.
func (*ServerIsBusy) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{22}
}

func (x *ServerIsBusy) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ServerIsBusy) GetBackoffMs() uint64 {
	if x != nil {
		return x.BackoffMs
	}
	return 0
}

// StaleCommand is the error variant that tells the command is stale, that is,
// the current request term is lower than current raft term.
// This can be retried at most time.
type StaleCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StaleCommand) Reset() {
	*x = StaleCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaleCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaleCommand) ProtoMessage() {}

func (x *StaleCommand) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaleCommand.ProtoReflect.Descriptor instead.
func (*StaleCommand) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{23}
}

// RaftEntryTooLarge is the error variant that tells the request is too large to be serialized to a
// reasonable small raft entry.
// (i.e. greater than the configured value `raft_entry_max_size` in `raftstore`)
type RaftEntryTooLarge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested region ID
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Size of the raft entry
	EntrySize uint64 `protobuf:"varint,2,opt,name=entry_size,json=entrySize,proto3" json:"entry_size,omitempty"`
}

func (x *RaftEntryTooLarge) Reset() {
	*x = RaftEntryTooLarge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftEntryTooLarge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftEntryTooLarge) ProtoMessage() {}

func (x *RaftEntryTooLarge) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftEntryTooLarge.ProtoReflect.Descriptor instead.
func (*RaftEntryTooLarge) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{24}
}

func (x *RaftEntryTooLarge) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *RaftEntryTooLarge) GetEntrySize() uint64 {
	if x != nil {
		return x.EntrySize
	}
	return 0
}

// MaxTimestampNotSynced is the error variant that tells the peer has just become a leader and
// updating the max timestamp in the concurrency manager from PD TSO is ongoing. In this case,
// the prewrite of an async commit transaction cannot succeed. The client can backoff and
// resend the request.
type MaxTimestampNotSynced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MaxTimestampNotSynced) Reset() {
	*x = MaxTimestampNotSynced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxTimestampNotSynced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxTimestampNotSynced) ProtoMessage() {}

func (x *MaxTimestampNotSynced) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxTimestampNotSynced.ProtoReflect.Descriptor instead.
func (*MaxTimestampNotSynced) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{25}
}

// ReadIndexNotReady is the error variant that tells the read index request is not ready, that is,
// the current region is in a status that not ready to serve the read index request. For example,
// region is in splitting or merging status.
// This can be retried at most time.
type ReadIndexNotReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reason why the region is not ready to serve read index request
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// The requested region ID
	RegionId uint64 `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *ReadIndexNotReady) Reset() {
	*x = ReadIndexNotReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIndexNotReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIndexNotReady) ProtoMessage() {}

func (x *ReadIndexNotReady) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIndexNotReady.ProtoReflect.Descriptor instead.
func (*ReadIndexNotReady) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{26}
}

func (x *ReadIndexNotReady) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ReadIndexNotReady) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

// ProposalInMergingMode is the error variant that tells the proposal is rejected because raft is
// in the merging mode. This may happen when BR/Lightning try to ingest SST.
// This can be retried at most time.
type ProposalInMergingMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested region ID
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *ProposalInMergingMode) Reset() {
	*x = ProposalInMergingMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalInMergingMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalInMergingMode) ProtoMessage() {}

func (x *ProposalInMergingMode) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalInMergingMode.ProtoReflect.Descriptor instead.
func (*ProposalInMergingMode) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{27}
}

func (x *ProposalInMergingMode) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type DataIsNotReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested region ID
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	PeerId   uint64 `protobuf:"varint,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	SafeTs   uint64 `protobuf:"varint,3,opt,name=safe_ts,json=safeTs,proto3" json:"safe_ts,omitempty"`
}

func (x *DataIsNotReady) Reset() {
	*x = DataIsNotReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataIsNotReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataIsNotReady) ProtoMessage() {}

func (x *DataIsNotReady) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataIsNotReady.ProtoReflect.Descriptor instead.
func (*DataIsNotReady) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{28}
}

func (x *DataIsNotReady) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *DataIsNotReady) GetPeerId() uint64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *DataIsNotReady) GetSafeTs() uint64 {
	if x != nil {
		return x.SafeTs
	}
	return 0
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Region key range [start_key, end_key).
	StartKey    []byte       `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey      []byte       `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	RegionEpoch *RegionEpoch `protobuf:"bytes,4,opt,name=region_epoch,json=regionEpoch,proto3" json:"region_epoch,omitempty"`
	Peers       []*Peer      `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
	// Encryption metadata for start_key and end_key. encryption_meta.iv is IV for start_key.
	// IV for end_key is calculated from (encryption_meta.iv + len(start_key)).
	// The field is only used by PD and should be ignored otherwise.
	// If encryption_meta is empty (i.e. nil), it means start_key and end_key are unencrypted.
	EncryptionMeta *EncryptionMeta `protobuf:"bytes,6,opt,name=encryption_meta,json=encryptionMeta,proto3" json:"encryption_meta,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{29}
}

func (x *Region) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Region) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *Region) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *Region) GetRegionEpoch() *RegionEpoch {
	if x != nil {
		return x.RegionEpoch
	}
	return nil
}

func (x *Region) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Region) GetEncryptionMeta() *EncryptionMeta {
	if x != nil {
		return x.EncryptionMeta
	}
	return nil
}

type RegionEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Conf change version, auto increment when add or remove peer
	ConfVer uint64 `protobuf:"varint,1,opt,name=conf_ver,json=confVer,proto3" json:"conf_ver,omitempty"`
	// Region version, auto increment when split or merge
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RegionEpoch) Reset() {
	*x = RegionEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionEpoch) ProtoMessage() {}

func (x *RegionEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionEpoch.ProtoReflect.Descriptor instead.
func (*RegionEpoch) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{30}
}

func (x *RegionEpoch) GetConfVer() uint64 {
	if x != nil {
		return x.ConfVer
	}
	return 0
}

func (x *RegionEpoch) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StoreId uint64   `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Role    PeerRole `protobuf:"varint,3,opt,name=role,proto3,enum=tikvpb.PeerRole" json:"role,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{31}
}

func (x *Peer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Peer) GetStoreId() uint64 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *Peer) GetRole() PeerRole {
	if x != nil {
		return x.Role
	}
	return PeerRole_Voter
}

// General encryption metadata for any data type.
type EncryptionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the key used to encrypt the data.
	KeyId uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Initialization vector (IV) of the data.
	Iv []byte `protobuf:"bytes,2,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *EncryptionMeta) Reset() {
	*x = EncryptionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionMeta) ProtoMessage() {}

func (x *EncryptionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionMeta.ProtoReflect.Descriptor instead.
func (*EncryptionMeta) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{32}
}

func (x *EncryptionMeta) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *EncryptionMeta) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

var File_tikvpb_proto protoreflect.FileDescriptor

var file_tikvpb_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x22, 0x63, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x56, 0x32, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x56, 0x32, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xbd, 0x05,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74,
	0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e,
	0x6f, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x61, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x22, 0xde, 0x02,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x74, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x78, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x74, 0x69,
	0x6b, 0x76, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xcb,
	0x03, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x69,
	0x6b, 0x76, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x69,
	0x6b, 0x76, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0d,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x69, 0x6b, 0x76,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x78,
	0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0b, 0x74, 0x78, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73,
	0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x54, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a,
	0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x54, 0x73, 0x22, 0x20, 0x0a, 0x0c, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x77,
	0x61, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x0c, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x78, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x78, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x61, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x54, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x54, 0x78,
	0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54,
	0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x2e, 0x0a, 0x14, 0x6b, 0x76, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x6b, 0x76, 0x52, 0x65, 0x61, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x22, 0xca, 0x03, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x56, 0x32, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x4b, 0x65, 0x79,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d,
	0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x6f, 0x63, 0x6b, 0x73,
	0x64, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64,
	0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x22, 0x80,
	0x01, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x56, 0x32,
	0x12, 0x33, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x56, 0x32, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56,
	0x32, 0x22, 0xb9, 0x07, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x76,
	0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x6f,
	0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x11, 0x6b, 0x65, 0x79,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x4b, 0x65,
	0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6b, 0x65,
	0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0d, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x73, 0x42, 0x75, 0x73, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x73, 0x42, 0x75, 0x73, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x69,
	0x6b, 0x76, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x4a, 0x0a, 0x14, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x11, 0x72, 0x61, 0x66, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x56, 0x0a,
	0x18, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x15,
	0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x11,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x56, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x65,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x52, 0x0a, 0x16,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x4e, 0x0a,
	0x09, 0x4e, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x61, 0x0a,
	0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x22, 0x2d, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x33, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x48, 0x0a, 0x0d, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x0f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x73, 0x42, 0x75, 0x73, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4d, 0x73, 0x22, 0x0e, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x4f, 0x0a, 0x11,
	0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x34, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x65,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x73,
	0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x61, 0x66, 0x65, 0x54, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x22, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x56, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x04, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x69, 0x6b,
	0x76, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x2a, 0x2b, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x10, 0x02, 0x2a, 0x20, 0x0a, 0x0e, 0x49, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x49,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x43, 0x10, 0x01, 0x2a, 0x63, 0x0a, 0x02, 0x4f, 0x70,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x65, 0x6c,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x06, 0x2a,
	0x48, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x6f, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x10, 0x03, 0x32, 0x3a, 0x0a, 0x04, 0x54, 0x69, 0x6b,
	0x76, 0x12, 0x32, 0x0a, 0x05, 0x4b, 0x76, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x74, 0x69, 0x6b,
	0x76, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tikvpb_proto_rawDescOnce sync.Once
	file_tikvpb_proto_rawDescData = file_tikvpb_proto_rawDesc
)

func file_tikvpb_proto_rawDescGZIP() []byte {
	file_tikvpb_proto_rawDescOnce.Do(func() {
		file_tikvpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_tikvpb_proto_rawDescData)
	})
	return file_tikvpb_proto_rawDescData
}

var file_tikvpb_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tikvpb_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_tikvpb_proto_goTypes = []interface{}{
	(CommandPri)(0),               // 0: tikvpb.CommandPri
	(IsolationLevel)(0),           // 1: tikvpb.IsolationLevel
	(Op)(0),                       // 2: tikvpb.Op
	(PeerRole)(0),                 // 3: tikvpb.PeerRole
	(*GetRequest)(nil),            // 4: tikvpb.GetRequest
	(*GetResponse)(nil),           // 5: tikvpb.GetResponse
	(*Context)(nil),               // 6: tikvpb.Context
	(*LockInfo)(nil),              // 7: tikvpb.LockInfo
	(*KeyError)(nil),              // 8: tikvpb.KeyError
	(*WriteConflict)(nil),         // 9: tikvpb.WriteConflict
	(*AlreadyExist)(nil),          // 10: tikvpb.AlreadyExist
	(*Deadlock)(nil),              // 11: tikvpb.Deadlock
	(*WaitForEntry)(nil),          // 12: tikvpb.WaitForEntry
	(*CommitTsExpired)(nil),       // 13: tikvpb.CommitTsExpired
	(*TxnNotFound)(nil),           // 14: tikvpb.TxnNotFound
	(*CommitTsTooLarge)(nil),      // 15: tikvpb.CommitTsTooLarge
	(*TimeDetail)(nil),            // 16: tikvpb.TimeDetail
	(*ScanDetailV2)(nil),          // 17: tikvpb.ScanDetailV2
	(*ExecDetailsV2)(nil),         // 18: tikvpb.ExecDetailsV2
	(*Error)(nil),                 // 19: tikvpb.Error
	(*NotLeader)(nil),             // 20: tikvpb.NotLeader
	(*StoreNotMatch)(nil),         // 21: tikvpb.StoreNotMatch
	(*RegionNotFound)(nil),        // 22: tikvpb.RegionNotFound
	(*RegionNotInitialized)(nil),  // 23: tikvpb.RegionNotInitialized
	(*KeyNotInRegion)(nil),        // 24: tikvpb.KeyNotInRegion
	(*EpochNotMatch)(nil),         // 25: tikvpb.EpochNotMatch
	(*ServerIsBusy)(nil),          // 26: tikvpb.ServerIsBusy
	(*StaleCommand)(nil),          // 27: tikvpb.StaleCommand
	(*RaftEntryTooLarge)(nil),     // 28: tikvpb.RaftEntryTooLarge
	(*MaxTimestampNotSynced)(nil), // 29: tikvpb.MaxTimestampNotSynced
	(*ReadIndexNotReady)(nil),     // 30: tikvpb.ReadIndexNotReady
	(*ProposalInMergingMode)(nil), // 31: tikvpb.ProposalInMergingMode
	(*DataIsNotReady)(nil),        // 32: tikvpb.DataIsNotReady
	(*Region)(nil),                // 33: tikvpb.Region
	(*RegionEpoch)(nil),           // 34: tikvpb.RegionEpoch
	(*Peer)(nil),                  // 35: tikvpb.Peer
	(*EncryptionMeta)(nil),        // 36: tikvpb.EncryptionMeta
}
var file_tikvpb_proto_depIdxs = []int32{
	6,  // 0: tikvpb.GetRequest.context:type_name -> tikvpb.Context
	19, // 1: tikvpb.GetResponse.region_error:type_name -> tikvpb.Error
	8,  // 2: tikvpb.GetResponse.error:type_name -> tikvpb.KeyError
	18, // 3: tikvpb.GetResponse.exec_details_v2:type_name -> tikvpb.ExecDetailsV2
	34, // 4: tikvpb.Context.region_epoch:type_name -> tikvpb.RegionEpoch
	35, // 5: tikvpb.Context.peer:type_name -> tikvpb.Peer
	0,  // 6: tikvpb.Context.priority:type_name -> tikvpb.CommandPri
	1,  // 7: tikvpb.Context.isolation_level:type_name -> tikvpb.IsolationLevel
	2,  // 8: tikvpb.LockInfo.lock_type:type_name -> tikvpb.Op
	7,  // 9: tikvpb.KeyError.locked:type_name -> tikvpb.LockInfo
	9,  // 10: tikvpb.KeyError.conflict:type_name -> tikvpb.WriteConflict
	10, // 11: tikvpb.KeyError.already_exist:type_name -> tikvpb.AlreadyExist
	11, // 12: tikvpb.KeyError.deadlock:type_name -> tikvpb.Deadlock
	13, // 13: tikvpb.KeyError.commit_ts_expired:type_name -> tikvpb.CommitTsExpired
	14, // 14: tikvpb.KeyError.txn_not_found:type_name -> tikvpb.TxnNotFound
	15, // 15: tikvpb.KeyError.commit_ts_too_large:type_name -> tikvpb.CommitTsTooLarge
	12, // 16: tikvpb.Deadlock.wait_chain:type_name -> tikvpb.WaitForEntry
	16, // 17: tikvpb.ExecDetailsV2.time_detail:type_name -> tikvpb.TimeDetail
	17, // 18: tikvpb.ExecDetailsV2.scan_detail_v2:type_name -> tikvpb.ScanDetailV2
	20, // 19: tikvpb.Error.not_leader:type_name -> tikvpb.NotLeader
	22, // 20: tikvpb.Error.region_not_found:type_name -> tikvpb.RegionNotFound
	24, // 21: tikvpb.Error.key_not_in_region:type_name -> tikvpb.KeyNotInRegion
	25, // 22: tikvpb.Error.epoch_not_match:type_name -> tikvpb.EpochNotMatch
	26, // 23: tikvpb.Error.server_is_busy:type_name -> tikvpb.ServerIsBusy
	27, // 24: tikvpb.Error.stale_command:type_name -> tikvpb.StaleCommand
	21, // 25: tikvpb.Error.store_not_match:type_name -> tikvpb.StoreNotMatch
	28, // 26: tikvpb.Error.raft_entry_too_large:type_name -> tikvpb.RaftEntryTooLarge
	29, // 27: tikvpb.Error.max_timestamp_not_synced:type_name -> tikvpb.MaxTimestampNotSynced
	30, // 28: tikvpb.Error.read_index_not_ready:type_name -> tikvpb.ReadIndexNotReady
	31, // 29: tikvpb.Error.proposal_in_merging_mode:type_name -> tikvpb.ProposalInMergingMode
	32, // 30: tikvpb.Error.data_is_not_ready:type_name -> tikvpb.DataIsNotReady
	23, // 31: tikvpb.Error.region_not_initialized:type_name -> tikvpb.RegionNotInitialized
	35, // 32: tikvpb.NotLeader.leader:type_name -> tikvpb.Peer
	33, // 33: tikvpb.EpochNotMatch.current_regions:type_name -> tikvpb.Region
	34, // 34: tikvpb.Region.region_epoch:type_name -> tikvpb.RegionEpoch
	35, // 35: tikvpb.Region.peers:type_name -> tikvpb.Peer
	36, // 36: tikvpb.Region.encryption_meta:type_name -> tikvpb.EncryptionMeta
	3,  // 37: tikvpb.Peer.role:type_name -> tikvpb.PeerRole
	4,  // 38: tikvpb.Tikv.KvGet:input_type -> tikvpb.GetRequest
	5,  // 39: tikvpb.Tikv.KvGet:output_type -> tikvpb.GetResponse
	39, // [39:40] is the sub-list for method output_type
	38, // [38:39] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_tikvpb_proto_init() }
func file_tikvpb_proto_init() {
	if File_tikvpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tikvpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteConflict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlreadyExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deadlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTsExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnNotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTsTooLarge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanDetailV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecDetailsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreNotMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionNotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionNotInitialized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyNotInRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochNotMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerIsBusy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaleCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftEntryTooLarge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxTimestampNotSynced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIndexNotReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalInMergingMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataIsNotReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tikvpb_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tikvpb_proto_goTypes,
		DependencyIndexes: file_tikvpb_proto_depIdxs,
		EnumInfos:         file_tikvpb_proto_enumTypes,
		MessageInfos:      file_tikvpb_proto_msgTypes,
	}.Build()
	File_tikvpb_proto = out.File
	file_tikvpb_proto_rawDesc = nil
	file_tikvpb_proto_goTypes = nil
	file_tikvpb_proto_depIdxs = nil
}
